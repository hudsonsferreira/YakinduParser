% start S

#############################
# Grammar Rules
#############################

# S expansion rules
S -> NP[NUM=?n, CASE=nom] VP[NUM=?n]
S -> S CC[SEM=cc_clause] S

# NP expansion rules
NP[NUM=?n, GENDER=?g] -> Det[NUM=?n] N[NUM=?n, GENDER=?g]
NP[NUM=?n, GENDER=?g] -> PropN[NUM=?n, GENDER=?g]
NP[NUM=?n, CASE=?c, GENDER=?g] -> Pro[NUM=?n, CASE=?c, GENDER=?g] 
NP[NUM=pl, GENDER=?g] -> N[NUM=pl] 
NP[NUM=?n, GENDER=?g] -> NP[NUM=?n, GENDER=?g] PP
NP[NUM=pl] -> NP CC[SEM=cc_np] NP

# N's can have Adjectives in front
N[NUM=?n] -> JJ[TYPE=attributive] N[NUM=?n]

# JJs can have ADVs in front
JJ -> ADV JJ

# VP expansion rules
VP[TNS=?t, NUM=?n] -> IV[TNS=?t, NUM=?n]
VP[TNS=?t, NUM=?n] -> TV[TNS=?t, NUM=?n] NP[CASE=acc]
VP[TNS=?t, NUM=?n] -> TVComp[TNS=?t, NUM=?n] S
VP[TNS=?t, NUM=?n] -> DTV[TNS=?t, NUM=?n] NP[CASE=acc] NP[CASE=acc]
VP[TNS=?t, NUM=?n] -> EquiV[TNS=?t, NUM=?n] TO VP[TNS=inf]
VP[TNS=?t, NUM=?n] -> ObjEquiV[TNS=?t, NUM=?n] NP[CASE=acc] TO VP[TNS=inf]
VP[TNS=?t, NUM=?n] -> RaisingV[TNS=?t, NUM=?n] TO VP[TNS=inf]
VP[TNS=?t, NUM=?n] -> ADV VP[TNS=?t, NUM=?n]
VP[TNS=?t, NUM=?n] -> VP[TNS=?t, NUM=?n] PP
VP[TNS=?t, NUM=?n] -> VP[TNS=?t, NUM=?n] CC[SEM=cc_vp] VP[TNS=?t, NUM=?n]

# PP expansion
PP -> IN NP

# Det types
Det[NUM=sg] -> DT
Det[NUM=pl] -> DTS
Det         -> AT
Det[NUM=?n] -> DTI[NUM=?n]
Det[NUM=?n] -> ABN[NUM=?n]


#############################
# Lexical Rules
#############################

DT -> 'this' | 'each'
DTS -> 'these'
AT[NUM=sg, SEM=ex_quant] -> 'a' | 'an'
AT[SEM=art_def] -> 'the'
DTI[NUM=sg, SEM=univ_quant] -> 'every'
DTI[SEM=ex_quant] -> 'some'
ABN[NUM=sg] -> 'half'
ABN[NUM=pl, SEM=univ_quant] -> 'all'

PropN[NUM=sg, GENDER=m, SEM=pn] -> 'Kim' | 'Jody' | 'Mary' | 'Sue'
PropN[NUM=sg, GENDER=m, SEM=pn] -> 'David' | 'John' | 'Tom'
PropN[NUM=pl, SEM=pn] -> 'JM'

N[NUM=sg, SEM=n] -> 'boy' | 'car' | 'cat' | 'child' | 'criminal' | 'dog' | 'gift' | 'girl' | 'man' | 'mouse' | 'person' | 'pizza' | 'racketeer' | 'sandwich' | 'senator' | 'student' | 'telescope' | 'thing' | 'unicorn' | 'woman'
N[NUM=pl, SEM=n] -> 'boys' | 'cars' | 'cats' | 'children' | 'criminals' | 'dogs' | 'gifts' | 'girls' | 'men' | 'mice' | 'people' | 'pizzas' | 'racketeers' | 'sandwiches' | 'senators' | 'students' | 'telescopes' | 'things' | 'unicorns' | 'women'

IV[TNS=pres, NUM=sg, SEM=iv] -> 'approaches' | 'comes' | 'disappears' | 'goes' | 'leaves' | 'vanishes' | 'walks' | 'yawns' 
IV[TNS=pres, NUM=pl, SEM=iv] -> 'approach' | 'come' | 'disappear' | 'go' | 'leave' | 'vanish' | 'walk' | 'yawn'
IV[TNS=past, NUM=?n, SEM=iv] -> 'approached' | 'came' | 'disappeared' | 'went' | 'left' | 'vanished' | 'walked' | 'yawned' 
IV[TNS=inf, NUM=na, SEM=iv] -> 'approach' | 'come' | 'disappear' | 'go' | 'leave' | 'vanish' | 'walk' | 'yawn'

TV[TNS=pres, NUM=sg, SEM=tv] -> 'chases' | 'eats' | 'finds' | 'likes' | 'sees' | 'orders'
TV[TNS=pres, NUM=pl, SEM=tv] -> 'chase' | 'eat' | 'find' | 'like' | 'see' | 'order'
TV[TNS=past, NUM=?n, SEM=tv] -> 'chased' | 'ate' | 'found' | 'liked' | 'saw' | 'ordered'
TV[TNS=inf, NUM=na, SEM=tv] -> 'chase' | 'eat' | 'find' | 'like' | 'see' | 'order'

DTV[TNS=pres, NUM=sg, SEM=dtv] -> 'gives'
DTV[TNS=pres, NUM=pl, SEM=dtv] -> 'give'
DTV[TNS=past, NUM=?n, SEM=dtv] -> 'gave'
DTV[TNS=inf, NUM=na, SEM=dtv] -> 'give'

TVComp[TNS=pres, NUM=sg, SEM=tv_comp] -> 'believes'
TVComp[TNS=pres, NUM=pl, SEM=tv_comp] -> 'believe'
TVComp[TNS=past, NUM=?n, SEM=tv_comp] -> 'believed'
TVComp[TNS=inf, NUM=na, SEM=tv_comp] -> 'believe'

EquiV[TNS=pres, NUM=sg, SEM=equi] -> 'tries'
EquiV[TNS=pres, NUM=pl, SEM=equi] -> 'try'
EquiV[TNS=past, NUM=?n, SEM=equi] -> 'tried'
EquiV[TNS=inf, NUM=na, SEM=equi] -> 'try'

ObjEquiV[TNS=pres, NUM=sg, SEM=obj_equi] -> 'persuades'
ObjEquiV[TNS=pres, NUM=pl, SEM=obj_equi] -> 'persuade'
ObjEquiV[TNS=past, NUM=?n, SEM=obj_equi] -> 'persuaded'
ObjEquiV[TNS=inf, NUM=na, SEM=obj_equi] -> 'persuade'

RaisingV[TNS=pres, NUM=sg, SEM=raising] -> 'seems'
RaisingV[TNS=pres, NUM=pl, SEM=raising] -> 'seem'
RaisingV[TNS=past, NUM=?n, SEM=raising] -> 'seemed'
RaisingV[TNS=inf, NUM=na, SEM=raising] -> 'seem'

#infinitive marker
TO -> 'to'

JJ[TYPE=attributive, SEM=adj_attributive_intersective] -> 'gray' | 'swedish'
JJ[TYPE=attributive, SEM=adj_attributive_nonintersective] -> 'alleged'
JJ[TYPE=attributive, SEM=adj_attributive_relative_intersective] -> 'big' | 'fat'
JJ[TYPE=attributive, SEM=adj_attributive_relative_nonintersective] -> 'confessed' | 'former'
JJ[TYPE=predicative, SEM=adj_predicative] -> 'gray' | 'swedish'

ADV[SEM=adv] -> 'apparently' | 'possibly' | 'very'
ADV[SEM=adv_ModifyingRelativeAdj] -> 'very'

CC[SEM=cc_clause] -> 'and'
CC[SEM=cc_np] -> 'and'
CC[SEM=cc_vp] -> 'and'

IN -> 'at' | 'by' | 'from' | 'on' | 'with'

Pro[NUM=sg, GENDER=m, -REFLEX, CASE=nom, SEM=pro] -> 'he'
Pro[NUM=sg, GENDER=m, -REFLEX, CASE=acc, SEM=pro] -> 'him'
Pro[NUM=sg, GENDER=m, +REFLEX, CASE=acc, SEM=pro] -> 'himself'
Pro[NUM=sg, GENDER=f, -REFLEX, SEM=pro] -> 'her'
Pro[NUM=sg, GENDER=f, +REFLEX, CASE=acc, SEM=pro] -> 'herself'
Pro[NUM=sg, GENDER=n, -REFLEX, SEM=pro] -> 'it'
Pro[NUM=sg, GENDER=n, +REFLEX, CASE=acc, SEM=pro] -> 'itself'
Pro[NUM=pl, -REFLEX, CASE=nom, SEM=pro] -> 'they'
Pro[NUM=pl, -REFLEX, CASE=acc, SEM=pro] -> 'them'
Pro[NUM=pl, +REFLEX, CASE=acc, SEM=pro] -> 'themselves'
Pro[NUM=pl, +REFLEX, CASE=acc, SEM=recip] -> 'eachother'
